#version 450

#define INFINITY 1.0f / 0.0f
#define EPSILON 0.001f

struct AmbientLight {
    float bright;
};

struct DirectionalLight {
    float bright, maxT;
    vec3 position;
};

struct PointLight {
    float bright, maxT;
    vec3 position;
};

struct Sphere {
    float radius, specular, reflective;
    vec4 center;
    vec4 color;
};
// should be deleted
struct Temp {
    DirectionalLight direction_light;
    AmbientLight ambient_light;
    PointLight point_light;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Hit {
    float t1, t2;
    Sphere sphere;
};

struct Camera {
    vec3 position;
    mat4 rotation;
};

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (binding = 0, rgba8) uniform image2D colorBuffer;
layout (std140, binding = 1) readonly buffer SpheresBuffer {
    Sphere spheres[];
};
layout (binding = 2) uniform SceneBuffer {
    int spheres_num;
    Camera camera;
} scene;

vec3 perPixel(int x, int y, Temp temp);

void main() {
    ivec2 screen_pos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    PointLight point_light;
    point_light.bright = 0.6f;
    point_light.position = vec3(0.0, 2.0, -6.0);
    point_light.maxT = 1.0f;

    AmbientLight ambient_light;
    ambient_light.bright = 0.1f;

    Temp temp;
    temp.point_light = point_light;
    temp.ambient_light = ambient_light;

    vec3 color = perPixel(screen_pos.x, screen_pos.y, temp);

    imageStore(colorBuffer, screen_pos, vec4(color, 1.0));
}

vec2 getSphereHit(Ray ray, Sphere sphere) {
    vec3 oc = ray.origin - sphere.center.xyz;

    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = b*b - 4.0*a*c;

    if (discriminant > 0) {
        float x1 = (-b + sqrt(discriminant)) / (2 * a);
        float x2 = (-b - sqrt(discriminant)) / (2 * a);

        return vec2(x1, x2);
    }

    return vec2(INFINITY, INFINITY);
}

Ray getRay(float x, float y)
{
    ivec2 screen_size = imageSize(colorBuffer);
    float fov = 60;

    vec3 direction = vec3(x * 1.f / screen_size.x, y * 1.f / screen_size.y, -1.0f);

    direction.x = direction.x * 2.0f - 1.0f;
    direction.y = 1.0f - 2.0f * direction.y;

    float aspect_ratio = float(screen_size.x) / float(screen_size.y);
    float fov_radians = radians(fov);
    float tan_half_fov = tan(fov_radians / 2.0f);
    
    direction.x = direction.x * aspect_ratio * tan_half_fov;
    direction.y = direction.y * tan_half_fov;

    vec4 rotated_direction = scene.camera.rotation * vec4(direction, 1.0f);

    Ray ray;
    ray.origin = scene.camera.position;
    ray.direction = normalize(rotated_direction.xyz);

    return ray;
}

vec3 getSkyColor(Ray ray)
{
    vec3 base = vec3(0.4, 0.9, 1.0);

    float pos = 0.5 * (ray.direction.y + 1.0);

    return (pos * base) + ((1 - pos) * vec3(1.0, 1.0, 1.0));
}

vec3 GetPointLightVector(vec3 point, PointLight light) {
    return normalize(light.position - point);
}

Hit getIntersection(Temp temp, Ray ray, float min_t, float max_t) {
	Hit intersection;
    intersection.t1 = INFINITY;
    intersection.t2 = INFINITY;

	for (int i = 0; i < scene.spheres_num; i++) {
		Sphere sphere = spheres[i];

		vec2 sphere_hit = getSphereHit(ray, sphere);

		if (sphere_hit.x < intersection.t1 && min_t < sphere_hit.x && sphere_hit.x < max_t) {
			intersection.t1 = sphere_hit.y;
			intersection.t2 = sphere_hit.x;
			intersection.sphere = sphere;
		}
		if (sphere_hit.y < intersection.t2 && min_t < sphere_hit.y && sphere_hit.y < max_t) {
			intersection.t2 = sphere_hit.x;
			intersection.t1 = sphere_hit.y;
			intersection.sphere = sphere;
		}
	}

	return intersection;
}

float ComputeLight(
    Temp temp,
    vec3 point,
    vec3 normal,
    vec3 view,
    Sphere sphere
) {
    float bright = temp.ambient_light.bright;
    float length_n = length(normal);
    float length_v = length(view);

    PointLight point_light = temp.point_light;

    vec3 lightVector = GetPointLightVector(point, point_light);
    float maxT = point_light.maxT;

    // Shadow check
    Ray shadow_ray;
    shadow_ray.origin = point + EPSILON * normal;
    shadow_ray.direction = lightVector;
    Hit shadow_blocker = getIntersection(temp, shadow_ray, EPSILON, maxT);

	if (shadow_blocker.t1 != INFINITY && shadow_blocker.t2 != INFINITY) {
		return bright;
	}

    float n_dot_l = dot(normal, lightVector);

    // Diffuse reflection
    if (n_dot_l > 0) {
        bright += point_light.bright * n_dot_l / (length_n * length(lightVector));
    }

    // Specular reflection.
    if (sphere.specular != -1) {
        vec3 vec_r = reflect(lightVector, normal);
        float r_dot_v = dot(vec_r, view);

        if (r_dot_v > 0) {
            bright += point_light.bright * pow(r_dot_v / (length(vec_r) * length_v), sphere.specular);
        }
    }

    return bright;
}

vec3 traceRay(
    Ray ray,
    Temp temp,
    float min_t,
    float max_t,
    int reflection_depth
) {
    vec3 final_color = vec3(0.0);
    float reflection_intensity = 1.0;

    for (int i = 0; i < reflection_depth; i++) {
        Hit intersection = getIntersection(temp, ray, min_t, max_t);

        if (intersection.t1 == INFINITY || intersection.t2 == INFINITY) {
            final_color += reflection_intensity * getSkyColor(ray);
            break;
        }

        vec3 point = ray.origin + (ray.direction * intersection.t1);
        vec3 normal = normalize(point - intersection.sphere.center.xyz);
        vec3 view = ray.direction * -1.0;

        float lighting = ComputeLight(temp, point, normal, view, intersection.sphere);
        vec3 local_color = intersection.sphere.color.xyz * lighting;

        final_color += reflection_intensity * local_color;

       if (intersection.sphere.reflective > 0.0) {
            ray.origin = point + EPSILON * normal;
            ray.direction = normalize(reflect(ray.direction, normal));
            reflection_intensity *= intersection.sphere.reflective;
        } else {
            break;
        }
    }

    return final_color;
}

vec3 getPixelColor(float x, float y, Temp temp)
{
    Ray ray = getRay(x, y);

    vec3 color = traceRay(ray, temp, 1, INFINITY, 3);

    return color;
}


vec3 perPixel(int x, int y, Temp temp)
{
	// anti-aliasing
	float aa = 16.f;
	float half_aa = aa / 2;
	float partial_aa = 1.f / half_aa;

    vec3 color = vec3(0.0f);

    float pixel_start_x = x - 0.5f;
	float pixel_start_y = y - 0.5f;

    for (int i = 0; i < half_aa; i++) {
		float u = pixel_start_x + (partial_aa * i);
		float v = pixel_start_y + (partial_aa * i);

		color = color + getPixelColor(u, v, temp);
	}

	pixel_start_x = x + 0.5f;

    for (int i = 0; i < half_aa; i++) {
	    float u = pixel_start_x - (partial_aa * i);
		float v = pixel_start_y + (partial_aa * i);

		color = color + getPixelColor(u, v, temp);
	}

	vec3 result_ns = color / aa;

    return result_ns;
}